package com.spd.qhyc.app;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidPooledConnection;
import com.spd.qhyc.database.DataSourceSingleton;
import com.spd.qhyc.model.ForcastData;
import com.spd.qhyc.model.MonthAvg;
import com.spd.qhyc.model.MonthData;
import com.spd.qhyc.util.CommonUtil;
import com.spd.qhyc.util.DBUtil;
import com.spd.qhyc.util.DateUtil;

/**
 * @作者:wangkun
 * @日期:2017年12月27日
 * @公司:spd
 * @说明:
*/
public class PsTestForPrec {

	public static void main(String[] args) throws Exception {
		System.out.println("降水Ps检验");
		//1、初始化时间
		Calendar cal = Calendar.getInstance();
		if(args.length>0){
			DateUtil dateUtil = new DateUtil(); 
			cal = dateUtil.parse("yyyyMM", args[0]);
		}
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH)+1;
		//2、连接数据库
		DruidDataSource dds = DataSourceSingleton.getInstance();
		DruidPooledConnection dpConn = null;
		try {
			dpConn = dds.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
		}
		//3、获取观测数据
		String sqlF = "select * from t_month_rain where year=%d";
		String sql = sqlF.format(sqlF, year);
		PreparedStatement ps = dpConn.prepareStatement(sql);
		ResultSet rs = ps.executeQuery();
		DBUtil dbUtil = new DBUtil();
		List<MonthData> lsMonthData = dbUtil.populate(rs, MonthData.class);
		rs.close();
		if(lsMonthData.isEmpty()){
			System.out.println("观测数据为空!");
			return;
		}
		Map<String,Double> mapObv = new HashMap<>();
		for(MonthData monthData:lsMonthData){
			String stationNum = monthData.getStationNum();
			double val = getMonthData(monthData,month);
			mapObv.put(stationNum, val);
		}
		
		//4、获取距平数据
		sql = "select * from v_month_prec_avg";
		ps = dpConn.prepareStatement(sql);
		rs = ps.executeQuery();
		List<MonthAvg> lsMonthAvg = dbUtil.populate(rs, MonthAvg.class);
		rs.close();
		if(lsMonthAvg.isEmpty()){
			System.out.println("平均观测数据为空!");
			return;
		}
		//5、计算距平或距平百分率,以平均里面的站点为基准
		Map<String,Double> mapJP = new HashMap<>();
		for(MonthAvg monthAvg:lsMonthAvg){
			String strNum = monthAvg.getStationnum();
			double obvVal = mapObv.get(strNum);
			double avgVal = getMonthAvg(monthAvg,month);
			double jpVal = 100*(obvVal-avgVal)/avgVal;
			mapJP.put(strNum, jpVal);
		}
		//4、获取预报数据
		sqlF = "select * from t_forecast_month_prec_data where year=%d";
		sql = sqlF.format(sqlF, year);
		ps = dpConn.prepareStatement(sql);
		rs = ps.executeQuery();
		List<ForcastData> lsForcastData = dbUtil.populate(rs, ForcastData.class);
		if(lsMonthData.isEmpty()){
			System.out.println("预测数据为空!");
			return;
		}
		Map<String,Double> mapForecast = new HashMap<>();
		for(ForcastData forcastData:lsForcastData){
			String stationNum = forcastData.getStationNum();
			double val = forcastData.getVal();
			mapForecast.put(stationNum, val);
		}
		CommonUtil commonUtil = new CommonUtil();
	}
	private static double getMonthData(MonthData monthData,int month){
		double val = 0;
		switch(month){
			case 1:
				val = monthData.getM1();
				break;
			case 2:
				val = monthData.getM2();
				break;
			case 3:
				val = monthData.getM3();
				break;
			case 4:
				val = monthData.getM4();
				break;
			case 5:
				val = monthData.getM5();
				break;
			case 6:
				val = monthData.getM6();
				break;
			case 7:
				val = monthData.getM7();
				break;
			case 8:
				val = monthData.getM8();
				break;
			case 9:
				val = monthData.getM9();
				break;
			case 10:
				val = monthData.getM10();
				break;
			case 11:
				val = monthData.getM11();
				break;
			case 12:
				val = monthData.getM12();
				break;
			default:
				break;
		}
		return val;
	}
	private static double getMonthAvg(MonthAvg monthAvg,int month){
		double val = 0;
		switch(month){
			case 1:
				val = monthAvg.getM1();
				break;
			case 2:
				val = monthAvg.getM2();
				break;
			case 3:
				val = monthAvg.getM3();
				break;
			case 4:
				val = monthAvg.getM4();
				break;
			case 5:
				val = monthAvg.getM5();
				break;
			case 6:
				val = monthAvg.getM6();
				break;
			case 7:
				val = monthAvg.getM7();
				break;
			case 8:
				val = monthAvg.getM8();
				break;
			case 9:
				val = monthAvg.getM9();
				break;
			case 10:
				val = monthAvg.getM10();
				break;
			case 11:
				val = monthAvg.getM11();
				break;
			case 12:
				val = monthAvg.getM12();
				break;
			default:
				break;
		}
		return val;
	}
}
