package com.spd.qhyc.app;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.pool.DruidPooledConnection;
import com.spd.qhyc.config.ConfigHelper;
import com.spd.qhyc.database.DataSourceSingleton;
import com.spd.qhyc.model.Config;
import com.spd.qhyc.util.DateUtil;
import com.spd.qhyc.util.MathUtil;
import com.weathermap.objects.*;

public class DynamicEquation {
	static Logger logger = LogManager.getLogger("mylog");
	public static void main(String[] args) throws Exception {
		Workspace ws = new Workspace();
		//需要参数(预报数据年月,预报月份)
		String elementID = "temp";
		String strStartDate = "20170901";//预报数据日期
		String strForecastDate = "201711";//预报日期
		Calendar calStart = DateUtil.parse("yyyyMMdd", strStartDate);
		Calendar calForecast = DateUtil.parse("yyyyMM", strForecastDate);
		// 2、连接数据库
		DruidDataSource dds = DataSourceSingleton.getInstance();
		DruidPooledConnection dpConn = null;
		try {
			dpConn = dds.getConnection();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		// 3、获取配置
		ConfigHelper configHelper = new ConfigHelper();
		Config config = configHelper.getConfig();
		
		//4、获取观测前一年测距平数据
		int year = calStart.get(Calendar.YEAR) - 1;
		int month = calStart.get(Calendar.MONTH)+1;
		List<StationVal> lsObserveData = getObserveJPData(dpConn,elementID,year,month);
		//5、获取前一年高度场距平数据
		DatasetRaster drJP = calLiveHeightDeparture(ws,config,calStart,calForecast);
		//6、建方程
		int stationCount=lsObserveData.size();
		double[][] hJuPing=new double[stationCount][4];
		for(int i = 0;i < stationCount;i++){
			StationVal stationVal = lsObserveData.get(i);
			double lon=stationVal.getLongitude();
			double lat=stationVal.getLatitude();
			Point2D p2d=new Point2D.Double(lon,lat);
			Point2D cell=drJP.PointToCell(p2d);
			int x=(int) cell.getX();
			int y=(int) cell.getY();
			double val=drJP.GetValue(x, y);//此格点值
			double rightVal=drJP.GetValue(x+1, y);//右格点值
			double bottomVal=drJP.GetValue(x, y-1);//下格点值
			double leftVal=drJP.GetValue(x-1, y);//左格点值
			double topVal=drJP.GetValue(x, y+1);//上格点值
			double pos=Math.abs(lat+2.5-lat*(lat+2.5)-lat);
			double term1=(rightVal+leftVal+topVal+bottomVal-4*val)/pos;
			double term2=rightVal-leftVal;
			double term3=(topVal-bottomVal)/y;
			double term4=val;
			hJuPing[i][0]=term1;
			hJuPing[i][1]=term2;
			hJuPing[i][2]=term3;
			hJuPing[i][3]=term4;
		}
		double[][] blive=new double[stationCount][1];
		for(int i=0;i<stationCount;i++){
			StationVal stationVal=lsObserveData.get(i);
			blive[i][0]=stationVal.getValue();
		}
		MathUtil mu=new MathUtil();
		double[][] x1=mu.getA_T(hJuPing);
		double[][] x1x=mu.MulMatrix(x1, hJuPing);
		double[][] xx1f1=mu.GetNiMatrix(x1x);
		double[][] x1y=mu.MulMatrix(x1, blive);
		double[][] xishu=mu.MulMatrix(xx1f1,x1y);
		double c1=xishu[0][0];
		double c2=xishu[1][0];
		double c3=xishu[2][0];
		double c4=xishu[3][0];
		//7、预测
		DatasetRaster drMode = calHeightDeparture(ws,config,calStart,calForecast);
		List<StationVal> lsResult = new ArrayList();//结果
		StationVal sv=null;
		for(int i=0;i<stationCount;i++){
			StationVal stationVal = lsObserveData.get(i);
			double lon = stationVal.getLongitude();
			double lat = stationVal.getLatitude();
			Point2D p2d = new Point2D.Double(lon,lat);
			Point2D cell = drMode.PointToCell(p2d);
			int x = (int) cell.getX();
			int y = (int) cell.getY();
			double val = drMode.GetValue(x, y);//此格点值
			double rightVal = drMode.GetValue(x+1, y);//右格点值
			double bottomVal = drMode.GetValue(x, y-1);//下格点值
			double leftVal = drMode.GetValue(x-1, y);//左格点值
			double topVal = drMode.GetValue(x, y+1);//上格点值
			double pos=Math.abs(lat+2.5-lat*(lat+2.5)-lat);
			double term1=(rightVal+leftVal+topVal+bottomVal-4*val)/pos;
			double term2=rightVal-leftVal;
			double term3=(topVal-bottomVal)/y;
			double term4=val;
			val=term1*c1+term2*c2+term3*c3+term4*c4;
			val=val<-100?-100:val;
			sv=new StationVal();
			sv.setStationName(stationVal.getStationName());
			sv.setStationNum(stationVal.getStationNum());
			sv.setLongitude(stationVal.getLongitude());
			sv.setLatitude(stationVal.getLatitude());
			sv.setValue(val);
			lsResult.add(sv);
		}
		//8、入库
		dpConn.close();
	}
	/**
	 * @throws Exception 
	 * @作者:杠上花
	 * @日期:2018年1月15日
	 * @修改日期:2018年1月15日
	 * @参数:
	 * @返回:
	 * @说明:获取观测距平数据
	 */
	private static List<StationVal> getObserveJPData(DruidPooledConnection dpConn,String elementid,int year,int month) throws Exception{
		String tablename=elementid.equals("temp")?"t_month_temp":"t_month_rain";
		String hosTableName = elementid.equals("temp")?"v_hos_temp":"v_hos_rain";
		String sql="select tm.stationname,vhr.stationnum,vhr.longitude,vhr.latitude,round(100*(tm.m%d-vhr.m%d)/vhr.m%d,0) as m%d from %s tm right join %s vhr on tm.stationnum=vhr.stationnum where year=%d";
		sql=String.format(sql, month,month,month,month,tablename,hosTableName,year);
		PreparedStatement ps=dpConn.prepareStatement(sql);
		ResultSet rs=ps.executeQuery();
		DBUtil dbUtil = new DBUtil();
		List<StationVal> lsResult = dbUtil.populate(rs, StationVal.class);
		ps.close();
		return lsResult;
	}
	/**
	 * @throws Exception 
	 * @作者:杠上花
	 * @日期:2018年1月15日
	 * @修改日期:2018年1月15日
	 * @参数:
	 * @返回:
	 * @说明:计算高度场实况距平
	 */
	private static DatasetRaster calLiveHeightDeparture(Workspace ws,Config config,Calendar calMake,Calendar calForecast) throws Exception {
		Calendar calEnd = (Calendar) calMake.clone();
		calEnd.add(Calendar.YEAR, 1);
		//1、高度场
		String strFile = config.getLiveHeightPath();
		File file = new File(strFile);
		if(!file.exists()) {
			logger.error(String.format("实况高度场文件:%s,不存在!", strFile));
			return null;
		}
		strFile = strFile.replace("\\", "/");
		String heightAlias = "height"+DateUtil.format("HHmmss", Calendar.getInstance());
		String strJson = "{\"Type\":\"netCDF\",\"Alias\":\""+heightAlias+"\",\"Server\":\"" + strFile + "\"}";
		Datasource ds = ws.OpenDatasource(strJson);
		if(ds==null || ds.GetDatasetCount()<1) {
			logger.error("高度场数据打开失败!");
			return null;
		}
		int index = getIndexFromLiveHeight(ds,calForecast);
		DatasetRaster drHeight = (DatasetRaster) ds.GetDataset(index);
		drHeight.CalcExtreme();
		//2、历史平均
		String path = config.getHgtAvgPath();
		int forecastMonth = calForecast.get(Calendar.MONTH);
		strFile = path + forecastMonth +".tif";
		file = new File(strFile);
		if(!file.exists()) {
			logger.error(String.format("文件:%s,不存在!", strFile));
			return null;
		}
		strFile = strFile.replace("\\", "/");
		String heightAvgAlias = "heightAvg"+DateUtil.format("HHmmss", Calendar.getInstance());
		strJson = "{\"Type\":\"netCDF\",\"Alias\":\""+heightAvgAlias+"\",\"Server\":\"" + strFile + "\"}";
		ds = ws.OpenDatasource(strJson);
		if(ds==null || ds.GetDatasetCount()<1) {
			logger.error("高度场平均数据打开失败!");
			return null;
		}
		DatasetRaster drHeightAvg = (DatasetRaster) ds.GetDataset(index);
		drHeightAvg.CalcExtreme();
		//3、新建内存数据集
		String heightJPAlias = "heightJP"+DateUtil.format("HHmmss", Calendar.getInstance());
		strJson = "{\"Type\":\"Memory\",\"Alias\":\""+heightJPAlias+"\",\"Server\":\"\"}";
		Datasource dsTemp = ws.CreateDatasource(strJson);
		double noVal = drHeight.GetNoDataValue();
		int rows = drHeight.GetHeight();
		int cols = drHeight.GetWidth();
		Rectangle2D r2d = drHeight.GetBounds();
		strJson = String.format("{\"Name\":\"%s\",\"ValueType\":\"%s\",\"Width\":%d,\"Height\":%d,\"BlockSize\":\"256 256\",\"Projection\":\"%s\",\"NoDataValue\":%f}",
				"d1", "Single", cols, rows, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs", noVal);
		DatasetRaster drTemp = dsTemp.CreateDatasetRaster(strJson);
		drTemp.SetBounds(r2d);
		drTemp.Open();
		//4、计算距平
		Scanline slHeight = new Scanline(drHeight.GetValueType(),cols);
		Scanline slHeightAvg = new Scanline(drHeightAvg.GetValueType(),cols);
		Scanline slTemp = new Scanline(drTemp.GetValueType(),cols);
		//double 
		for(int r = rows-1;r>=0;r--) {
			drHeight.GetScanline(0, r, slHeight);
			drHeightAvg.GetScanline(0, r, slHeightAvg);
			drTemp.GetScanline(0, r, slTemp);
			for(int c = 0;c<cols;c++) {
				double heightVal = slHeight.GetValue(c);
				double heightAvgVal = slHeightAvg.GetValue(c);
				double jpVal = heightVal - heightAvgVal;
				slTemp.SetValue(c, jpVal);
			}
		}
		drTemp.FlushCache();
		drTemp.CalcExtreme();
		ws.CloseDatasource(heightAlias);
		ws.CloseDatasource(heightAvgAlias);
		ws.CloseDatasource(heightJPAlias);
		return drTemp;
	}
	/**
	 * @作者:杠上花
	 * @日期:2018年1月15日
	 * @修改日期:2018年1月15日
	 * @参数:
	 * @返回:
	 * @说明:计算高度场距平
	 */
	private static DatasetRaster calHeightDeparture(Workspace ws,Config config,Calendar calMake,Calendar calForecast) {
		Calendar calEnd = (Calendar) calMake.clone();
		calEnd.add(Calendar.YEAR, 1);
		//1、高度场
		String path = config.getModeHeightPath();
		String strMakeDate = DateUtil.format("yyyyMMdd", calMake);
		String strStartDate = DateUtil.format("yyyyMM", calMake);
		String strEndDate = DateUtil.format("yyyyMMdd", calEnd);
		String strFileNameFormat = "%s.atm.Z3.%s-%s_prs0500_member.nc";
		String strFileName = String.format(strFileNameFormat,strMakeDate,strStartDate,strEndDate);
		String strFile = path + strFileName;
		File file = new File(strFile);
		if(!file.exists()) {
			logger.error(String.format("高度场文件:%s,不存在!", strFile));
			return null;
		}
		strFile = strFile.replace("\\", "/");
		String heightAlias = "height"+DateUtil.format("HHmmss", Calendar.getInstance());
		String strJson = "{\"Type\":\"netCDF\",\"Alias\":\""+heightAlias+"\",\"Server\":\"" + strFile + "\"}";
		Datasource ds = ws.OpenDatasource(strJson);
		if(ds==null || ds.GetDatasetCount()<1) {
			logger.error("高度场数据打开失败!");
			return null;
		}
		int index = getIndexFromNC(ds,calMake,calForecast);
		DatasetRaster drHeight = (DatasetRaster) ds.GetDataset(index);
		drHeight.CalcExtreme();
		//2、历史平均
		path = config.getHgtAvgPath();
		int forecastMonth = calForecast.get(Calendar.MONTH);
		strFile = path + forecastMonth +".tif";
		file = new File(strFile);
		if(!file.exists()) {
			logger.error(String.format("文件:%s,不存在!", strFile));
			return null;
		}
		strFile = strFile.replace("\\", "/");
		String heightAvgAlias = "heightAvg"+DateUtil.format("HHmmss", Calendar.getInstance());
		strJson = "{\"Type\":\"netCDF\",\"Alias\":\""+heightAvgAlias+"\",\"Server\":\"" + strFile + "\"}";
		ds = ws.OpenDatasource(strJson);
		if(ds==null || ds.GetDatasetCount()<1) {
			logger.error("高度场平均数据打开失败!");
			return null;
		}
		DatasetRaster drHeightAvg = (DatasetRaster) ds.GetDataset(index);
		drHeightAvg.CalcExtreme();
		//3、新建内存数据集
		String heightJPAlias = "heightJP"+DateUtil.format("HHmmss", Calendar.getInstance());
		strJson = "{\"Type\":\"Memory\",\"Alias\":\""+heightJPAlias+"\",\"Server\":\"\"}";
		Datasource dsTemp = ws.CreateDatasource(strJson);
		double noVal = drHeight.GetNoDataValue();
		int rows = drHeight.GetHeight();
		int cols = drHeight.GetWidth();
		Rectangle2D r2d = drHeight.GetBounds();
		strJson = String.format("{\"Name\":\"%s\",\"ValueType\":\"%s\",\"Width\":%d,\"Height\":%d,\"BlockSize\":\"256 256\",\"Projection\":\"%s\",\"NoDataValue\":%f}",
				"d1", "Single", cols, rows, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs", noVal);
		DatasetRaster drTemp = dsTemp.CreateDatasetRaster(strJson);
		drTemp.SetBounds(r2d);
		drTemp.Open();
		//4、计算距平
		Scanline slHeight = new Scanline(drHeight.GetValueType(),cols);
		Scanline slHeightAvg = new Scanline(drHeightAvg.GetValueType(),cols);
		Scanline slTemp = new Scanline(drTemp.GetValueType(),cols);
		//double 
		for(int r = rows-1;r>=0;r--) {
			drHeight.GetScanline(0, r, slHeight);
			drHeightAvg.GetScanline(0, r, slHeightAvg);
			drTemp.GetScanline(0, r, slTemp);
			for(int c = 0;c<cols;c++) {
				double heightVal = slHeight.GetValue(c);
				double heightAvgVal = slHeightAvg.GetValue(c);
				double jpVal = heightVal - heightAvgVal;
				slTemp.SetValue(c, jpVal);
			}
		}
		drTemp.FlushCache();
		drTemp.CalcExtreme();
		ws.CloseDatasource(heightAlias);
		ws.CloseDatasource(heightAvgAlias);
		return drTemp;
	}
	/**
	 * @作者:杠上花
	 * @日期:2018年1月15日
	 * @修改日期:2018年1月15日
	 * @参数:
	 * @返回:
	 * @说明:获取预报月份的索引
	 */
	private static int getIndexFromNC(Datasource ds,Calendar calMake,Calendar calForecast) {
		Calendar calMakeTemp = (Calendar) calMake.clone();
		Calendar calForecastTemp = (Calendar) calForecast.clone();
		int diffMonth = 0;
		while(true) {
			diffMonth++;
			calMakeTemp.add(Calendar.MONTH, 1);
			int makeYear = calMake.get(Calendar.YEAR);
			int makeMonth = calMake.get(Calendar.MONTH);
			int forecastYear = calForecast.get(Calendar.YEAR);
			int forecastMonth = calForecast.get(Calendar.MONTH);
			if(makeYear == forecastYear && makeMonth == forecastMonth) {
				break;
			}
		}
		int index = (diffMonth - 1)*24;
		return index;
	}
	/**
	 * @throws Exception 
	 * @作者:杠上花
	 * @日期:2018年1月15日
	 * @修改日期:2018年1月15日
	 * @参数:
	 * @返回:索引
	 * @说明:获取预报月份去年月份在实况NC中的索引
	 */
	private static int getIndexFromLiveHeight(Datasource ds,Calendar calForecast) throws Exception {
		int index = 0;
		Calendar calForecastTemp = (Calendar) calForecast.clone();
		calForecastTemp.add(Calendar.YEAR, -1);
		int tartgetYear = calForecastTemp.get(Calendar.YEAR);
		int tartgetMonth = calForecastTemp.get(Calendar.MONTH);
		int startYear = 1948;
		int month = 1;
		int targetLevel = 500;
		int dsCount = ds.GetDatasetCount();
		JSONObject json = null;
		for(int i = 0;i<dsCount;i++) {
			Dataset dataset = ds.GetDataset(i);
			String strMeta = dataset.GetMetadata();
			json = new JSONObject(strMeta);
			int level = json.getInt("NETCDF_DIM_level");
			if(level ==10){//最小
				month++;
			}
			if(month>12){
				month=1;
				startYear++;
			}
			if(startYear == tartgetYear && month == tartgetMonth && level == targetLevel){
				break;
			}
			index++;
		}
		return index;
	}
}
